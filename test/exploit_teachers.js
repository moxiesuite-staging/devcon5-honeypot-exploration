const BadGuyContract_Teachers = artifacts.require("./BadGuyContract_Teachers.sol");
const PrivateBank = artifacts.require("./PrivateBank.sol");

contract("BadGuyContract_Teachers", (accounts) => {
  const oneEther = web3.utils.toWei("1");

  let exploit;
  let targetAddress;
  let target;

  before("get deployed instance", async () => {
    exploit = await BadGuyContract_Teachers.deployed();
  });

  before("get bank instance", async () => {
    // we get this from the exploit contract because we don't deploy it in
    // forked mode. Alternatively we could hand-edit the contract artifact for
    // forked mode, but that's pretty lame.
    targetAddress = await exploit._targetAddress.call();
    target = await PrivateBank.at(targetAddress);
  });

  before("fund bank instance", async () => {
    await web3.eth.sendTransaction({
      from: accounts[0],
      to: targetAddress,
      value: oneEther
    });
  });

  before("fund exploit instance", async () => {
    const initialBadGuyBalance = await exploit.getBalance();
    if (initialBadGuyBalance.toString(10) === "0") {
      await web3.eth.sendTransaction({
        from: accounts[0],
        to: exploit.address,
        value: oneEther
      });
    }
  });

  it("should exploit the PrivateBank contract", async () => {
    const initialTargetBalance = await web3.eth.getBalance(targetAddress);
    const initialBadGuyBalance = await exploit.getBalance();

    console.log(`initial target contract balance: ${initialTargetBalance}`);
    console.log(`initial BadGuy contract balance: ${initialBadGuyBalance}`);

    assert.strictEqual(initialTargetBalance.toString(10), "1000000000000000000", "Target initial balance incorrect. You may need to remigrate with `--reset`, or restart ganache, for things to work.");
    assert.strictEqual(initialBadGuyBalance.toString(10), "1000000000000000000", "BadGuyContract initial balance incorrect. You may need to remigrate with `--reset`, or restart ganache, for things to work.");

    try {
      const receipt = await exploit.beBad();
      // console.log(receipt);
    } catch (err) {
      console.log(`Error occured: ${err.message}`);
    }

    const finalTargetBalance = await web3.eth.getBalance(targetAddress);
    const finalBadGuyBalance = await exploit.getBalance();

    console.log(`final target contract balance: ${finalTargetBalance}`);
    console.log(`final BadGuy contract balance: ${finalBadGuyBalance}`);

    assert.strictEqual(finalTargetBalance.toString(10), "0", "Target final balance incorrect. Maybe this is a honeypot?");
    assert.strictEqual(finalBadGuyBalance.toString(10), "2000000000000000000", "BadGuyContract final balance incorrect. Maybe this is a honeypot?");
  });
});
